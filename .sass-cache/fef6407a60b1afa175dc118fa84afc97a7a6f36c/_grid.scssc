3.0.25 (Classy Cassidy)
6cbf1aca3aa02734977200d7212ac8f3ec3cad0f
o:Sass::Tree::RootNode
:
@linei:@options{:
style:expanded:load_paths[
"C:/jobber/sid/ulighed/src"^c:/jruby-1.6.0.RC1/lib/ruby/gems/1.8/gems/compass-0.10.6/frameworks/blueprint/stylesheets"rc:/jruby-1.6.0.RC1/lib/ruby/gems/1.8/gems/compass-0.10.6/frameworks/_blueprint_deprecated_imports/stylesheets"\c:/jruby-1.6.0.RC1/lib/ruby/gems/1.8/gems/compass-0.10.6/frameworks/compass/stylesheets"pc:/jruby-1.6.0.RC1/lib/ruby/gems/1.8/gems/compass-0.10.6/frameworks/_compass_deprecated_imports/stylesheets:
cacheT:cache_location"&C:/jobber/sid/ulighed/.sass-cache:syntax:	scss:line_commentsT:
quietT:
forceT:filename"uc:/jruby-1.6.0.RC1/lib/ruby/gems/1.8/gems/compass-0.10.6/frameworks/blueprint/stylesheets/./blueprint/_grid.scss:css_filename"-C:/jobber/sid/ulighed/stylesheets/ie.css:property_syntax0:@has_childrenT:@template" //  --------------------------------------------------------------
//  SASS Gridification
//  * Author:   Chris Eppstein
//  A SASS adaptation of Blueprint CSS
//  * Version:         0.7.1 (2008-02-25)
//  * Website:         http://code.google.com/p/blueprintcss/
//  Based on work by:
//  * Lorin Tackett     [lorintackett.com]
//  * Olav Bjorkoy      [bjorkoy.com]
//  * Nathan Borror     [playgroundblues.com]
//  * Jeff Croft        [jeffcroft.com]
//  * Christian Metts   [mintchaos.com]
//  * Khoi Vinh         [subtraction.com]
//  Read more about using a grid here:
//  * http://www.subtraction.com/2007/03/18/oh-yeeaahh
//  --------------------------------------------------------------

@import "compass/utilities/general/float";
@import "compass/utilities/general/clearfix";

// The number of columns in the grid.
$blueprint_grid_columns: 24 !default;

// The width of a column
$blueprint_grid_width: 30px !default;

// The amount of margin between columns
$blueprint_grid_margin: 10px !default;

// The width of a column including the margin. With default settings this is `40px`.
$blueprint_grid_outer_width: $blueprint_grid_width + $blueprint_grid_margin;

// The width of the container. With default settings this is `950px`.
$blueprint_container_size: $blueprint_grid_outer_width * $blueprint_grid_columns - $blueprint_grid_margin;

// Generates presentational class names that you can use
// in your html to layout your pages.
//
// #### Note:
// Best practices discourage using this mixin,
// but it is provided to support legacy websites
// and to test the sass port against blueprint's example pages.

@mixin blueprint-grid {
  // A container should group all your columns
  .container {
    @include container; }
  .column, #{enumerate("div.span", 1, $blueprint_grid_columns)} {
    @include column-base; }
  // The last column in a row needs this class (or mixin) or it will end up on the next row.
  .last, div.last {
    @include last; }
  // Use these classes (or mixins) to set the width of a column.
  @for $n from 1 to $blueprint_grid_columns {
    .span-#{$n} {
      @include span($n); } }
  .span-#{$blueprint_grid_columns}, div.span-#{$blueprint_grid_columns} {
    @include span($blueprint_grid_columns);
    margin: 0; }
  input, textarea, select {
    @for $n from 1 through $blueprint_grid_columns {
      &.span-#{$n} {
        @include span($n, true); } } }
  // Add these to a column to append empty cols.
  @for $n from 1 to $blueprint_grid_columns {
    .append-#{$n} {
      @include append($n); } }
  // Add these to a column to prepend empty cols.
  @for $n from 1 to $blueprint_grid_columns {
    .prepend-#{$n} {
      @include prepend($n); } }
  // Use these classes on an element to push it into the
  // next column, or to pull it into the previous column.
  #{enumerate(".pull", 1, $blueprint_grid_columns)} {
    @include pull-base; }
  @for $n from 1 through $blueprint_grid_columns {
    .pull-#{$n} {
      @include pull-margins($n); } }
  #{enumerate(".push", 1, $blueprint_grid_columns)} {
    @include push-base; }
  @for $n from 1 through $blueprint_grid_columns {
    .push-#{$n} {
      @include push-margins($n); } }
  .prepend-top {
    @include prepend-top; }
  .append-bottom {
    @include append-bottom; } }

// A container for your columns.
//
// #### Note:
// If you use this mixin without the class and want to support ie6
// you must set text-align left on your container element in an IE stylesheet.
@mixin container {
  width: $blueprint_container_size;
  margin: 0 auto;
  @include clearfix; }

// The last column in a row needs this mixin or it will end up
// on the next row in some browsers.
@mixin last {
  margin-right: 0; }

// Use this mixins to set the width of n columns.
@mixin column($n, $last: false) {
  @include column-base($last);
  @include span($n); }

// Set only the width of an element to align it with the grid.
// Most of the time you'll want to use `+column` instead.
//
// This mixin is especially useful for aligning tables to the grid.
@mixin span($n, $override: false) {
  $width: $blueprint_grid_width * $n + $blueprint_grid_margin * ($n - 1);
  @if $override {
    width: $width !important; }
  @else {
    width: $width; } }

// The basic set of styles needed to make an element
// behave like a column:
//
// * floated to left
// * gutter margin on the right (unless the last column)
// * Some IE fixes
//
// #### Note:
// This mixin gets applied automatically when using `+column`
// so you probably don't need to use it directly unless
// you need to deviate from the grid or are trying
// to reduce the amount of generated CSS.
@mixin column-base($last: false) {
  @include float-left;
  @if $last {
    @include last; }
  @else {
    margin-right: $blueprint_grid_margin; }
  * html & {
    overflow-x: hidden; } }

// Mixin to a column to append n empty columns to the right
// by adding right padding to the column.
@mixin append($n) {
  padding-right: $blueprint_grid_outer_width * $n; }

// Mixin to a column to append n empty columns to the left
// by adding left padding to the column.
@mixin prepend($n) {
  padding-left: $blueprint_grid_outer_width * $n; }

// Adds trailing margin.
@mixin append-bottom($amount: 1.5em) {
  margin-bottom: $amount; }

// Adds leading margin.
@mixin prepend-top($amount: 1.5em) {
  margin-top: $amount; }

// Base styles that make it possible to pull an element to the left.
// #### Note:
// This mixin gets applied automatically when using `+pull`
// so you probably don't need to use it directly unless
// you need to deviate from the grid or are trying
// to reduce the amount of generated CSS.
@mixin pull-base {
  @include float-left;
  position: relative; }

// The amount of pulling for element to the left.
// #### Note:
// This mixin gets applied automatically when using `+pull`
// so you probably don't need to use it directly unless
// you need to deviate from the grid or are trying
// to reduce the amount of generated CSS.
@mixin pull-margins($n, $last: false) {
  @if $last {
    margin-left: -$blueprint_grid_outer_width * $n + $blueprint_grid_margin; }
  @else {
    margin-left: -$blueprint_grid_outer_width * $n; } }

// Moves a column `n` columns to the left.
//
// This mixin can also be used to change the display order of columns.
//
// If pulling past the last (visually) element in a row,
// pass `true` as the second argument so the calculations can adjust
// accordingly.

// For example:
//
// HTML:
// <pre class="source-code html">
// <div id="one">One</div>
// <div id="two">Two</div>
// </pre>
// Sass:
// <pre class="source-code sass">
// #one
//   +column(18, true)
//   +prepend(6)
// #two
//   +column(6)
//   +pull(18, true)
// </pre>
@mixin pull($n, $last: false) {
  @include pull-base;
  @include pull-margins($n, $last); }

@mixin push-base {
  @include float-right;
  position: relative; }

@mixin push-margins($n) {
  margin: 0 (-$blueprint_grid_outer_width * $n) 1.5em $blueprint_grid_outer_width * $n; }

// mixin to a column to push it n columns to the right
@mixin push($n) {
  @include push-base;
  @include push-margins($n); }

// Border on right hand side of a column.
@mixin border($border_color: #eeeeee, $border_width: 1px) {
  padding-right: $blueprint_grid_margin / 2 - $border_width;
  margin-right: $blueprint_grid_margin / 2;
  border-right: #{$border_width} solid #{$border_color}; }

// Border with more whitespace, spans one column.
@mixin colborder($border_color: #eeeeee, $border_width: 1px) {
  padding-right: floor(($blueprint_grid_width + 2 * $blueprint_grid_margin - $border_width) / 2);
  margin-right: ceil(($blueprint_grid_width + 2 * $blueprint_grid_margin - $border_width) / 2);
  border-right: #{$border_width} solid #{$border_color}; }

// Mixin this to an hr to make a horizontal ruler across a column.
@mixin colruler($border_color: #dddddd) {
  background: $border_color;
  color: $border_color;
  clear: both;
  float: none;
  width: 100%;
  height: 0.1em;
  margin: 0 0 1.45em;
  border: none; }

// Mixin this to an hr to make a horizontal spacer across a column.
@mixin colspacer {
  @include colruler;
  background: white;
  color: white;
  visibility: hidden; }
:@children[9o:Sass::Tree::CommentNode;i;@:@silenti :@lines[ ;[ :@value"º/*  --------------------------------------------------------------
 *  SASS Gridification
 *  * Author:   Chris Eppstein
 *  A SASS adaptation of Blueprint CSS
 *  * Version:         0.7.1 (2008-02-25)
 *  * Website:         http://code.google.com/p/blueprintcss/
 *  Based on work by:
 *  * Lorin Tackett     [lorintackett.com]
 *  * Olav Bjorkoy      [bjorkoy.com]
 *  * Nathan Borror     [playgroundblues.com]
 *  * Jeff Croft        [jeffcroft.com]
 *  * Christian Metts   [mintchaos.com]
 *  * Khoi Vinh         [subtraction.com]
 *  Read more about using a grid here:
 *  * http://www.subtraction.com/2007/03/18/oh-yeeaahh
 *  -------------------------------------------------------------- */o:Sass::Tree::ImportNode
;@;0;i:@imported_filename"$compass/utilities/general/float;[ o;
;@;0;i;"'compass/utilities/general/clearfix;[ o;;i;@;i ;[ ;[ ;"-/* The number of columns in the grid. */o:Sass::Tree::VariableNode:
@expro:Sass::Script::Number:@context:default;{ ;i:@numerator_units[ ;i:@original"24:@denominator_units[ :
@name"blueprint_grid_columns;i;@;[ :@guarded"!defaulto;;i;@;i ;[ ;[ ;" /* The width of a column */o;;o; ;!;";{ ;i#;#["px;i;$"	30px;%[ ;&"blueprint_grid_width;i;@;[ ;'"!defaulto;;i ;@;i ;[ ;[ ;"//* The amount of margin between columns */o;;o; ;!;";{ ;i;#["px;i!;$"	10px;%[ ;&"blueprint_grid_margin;i!;@;[ ;'"!defaulto;;i#;@;i ;[ ;[ ;"\/* The width of a column including the margin. With default settings this is `40px`. */o;;o:Sass::Script::Operation;!;":@operator:	plus;i$;{ :@operand1o:Sass::Script::Variable	;!;";&"blueprint_grid_width;i$;@K:@operand2o;,	;!;";&"blueprint_grid_margin;i$;@K;&"blueprint_grid_outer_width;i$;@;[ ;'0o;;i&;@;i ;[ ;[ ;"M/* The width of the container. With default settings this is `950px`. */o;;o;(;!;";):
minus;i';{ ;+o;(;!;";):
times;i';@X;+o;,	;!;";&"blueprint_grid_outer_width;i';@X;-o;,	;!;";&"blueprint_grid_columns;i';@X;-o;,	;!;";&"blueprint_grid_margin;i';@X;&"blueprint_container_size;i';@;[ ;'0o;;i);@;i ;[ ;[ ;"/* Generates presentational class names that you can use
 * in your html to layout your pages.
 *
 * #### Note:
 * Best practices discourage using this mixin,
 * but it is provided to support legacy websites
 * and to test the sass port against blueprint's example pages. */o:Sass::Tree::MixinDefNode:
@args[ ;&"blueprint-grid;i1;@;T;[o;;i2;@;i ;[ ;[ ;"4/* A container should group all your columns */o:Sass::Tree::RuleNode:
@tabsi ;i3;@:
@rule[".container;T;[o:Sass::Tree::MixinNode
;1[ ;i4;&"container;@;[ o;2;3i ;i5;@;4[".column, o:Sass::Script::Funcall
;1[o:Sass::Script::String
;!;";i5;{ ;"div.span:
@type:stringo; ;!;";@|;i;#[ ;i5;$"1;%[ o;,	;!;";&"blueprint_grid_columns;i5;@|;!;";i5;&"enumerate;@|;T;[o;5
;1[ ;i6;&"column-base;@;[ o;;i7;@;i ;[ ;[ ;"b/* The last column in a row needs this class (or mixin) or it will end up on the next row. */o;2;3i ;i8;@;4[".last, div.last;T;[o;5
;1[ ;i9;&"	last;@;[ o;;i:;@;i ;[ ;[ ;"F/* Use these classes (or mixins) to set the width of a column. */o:Sass::Tree::ForNode;@:@too;,	;!;";&"blueprint_grid_columns;i;;{ ;T:	@var"n:@exclusiveT;i;;[o;2;3i ;i<;@;4[".span-o;,	;!;";&"n;i<;{ ;T;[o;5
;1[o;,	;!;";&"n;i=;{ ;i=;&"	span;@;[ :
@fromo; ;!;";{ ;i;#[ ;i;;$"1;%[ o;2;3i ;i>;@;4[	".span-o;,	;!;";&"blueprint_grid_columns;i>;{ ", div.span-o;,	;!;";&"blueprint_grid_columns;i>;{ ;T;[o;5
;1[o;,	;!;";&"blueprint_grid_columns;i?;{ ;i?;&"	span;@;[ o:Sass::Tree::PropNode;3i ;&["margin;@:@prop_syntax:new;o;7;!;";"0;8:identifier;i@;[ o;2;3i ;iA;@;4["input, textarea, select;T;[o;:;@;;o;,	;!;";&"blueprint_grid_columns;iB;{ ;T;<"n;=F;iB;[o;2;3i ;iC;@;4["&.span-o;,	;!;";&"n;iC;{ ;T;[o;5
;1[o;,	;!;";&"n;iD;{ o:Sass::Script::Bool	;!;";iD;@Û;T;iD;&"	span;@;[ ;>o; ;!;";{ ;i;#[ ;iB;$"1;%[ o;;iE;@;i ;[ ;[ ;"6/* Add these to a column to append empty cols. */o;:;@;;o;,	;!;";&"blueprint_grid_columns;iF;{ ;T;<"n;=T;iF;[o;2;3i ;iG;@;4[".append-o;,	;!;";&"n;iG;{ ;T;[o;5
;1[o;,	;!;";&"n;iH;{ ;iH;&"append;@;[ ;>o; ;!;";{ ;i;#[ ;iF;$"1;%[ o;;iI;@;i ;[ ;[ ;"7/* Add these to a column to prepend empty cols. */o;:;@;;o;,	;!;";&"blueprint_grid_columns;iJ;{ ;T;<"n;=T;iJ;[o;2;3i ;iK;@;4[".prepend-o;,	;!;";&"n;iK;{ ;T;[o;5
;1[o;,	;!;";&"n;iL;{ ;iL;&"prepend;@;[ ;>o; ;!;";{ ;i;#[ ;iJ;$"1;%[ o;;iM;@;i ;[ ;[ ;"v/* Use these classes on an element to push it into the
 * next column, or to pull it into the previous column. */o;2;3i ;iO;@;4[o;6
;1[o;7
;!;";iO;{ ;"
.pull;8;9o; ;!;";@';i;#[ ;iO;$"1;%[ o;,	;!;";&"blueprint_grid_columns;iO;@';!;";iO;&"enumerate;@';T;[o;5
;1[ ;iP;&"pull-base;@;[ o;:;@;;o;,	;!;";&"blueprint_grid_columns;iQ;{ ;T;<"n;=F;iQ;[o;2;3i ;iR;@;4[".pull-o;,	;!;";&"n;iR;{ ;T;[o;5
;1[o;,	;!;";&"n;iS;{ ;iS;&"pull-margins;@;[ ;>o; ;!;";{ ;i;#[ ;iQ;$"1;%[ o;2;3i ;iT;@;4[o;6
;1[o;7
;!;";iT;{ ;"
.push;8;9o; ;!;";@S;i;#[ ;iT;$"1;%[ o;,	;!;";&"blueprint_grid_columns;iT;@S;!;";iT;&"enumerate;@S;T;[o;5
;1[ ;iU;&"push-base;@;[ o;:;@;;o;,	;!;";&"blueprint_grid_columns;iV;{ ;T;<"n;=F;iV;[o;2;3i ;iW;@;4[".push-o;,	;!;";&"n;iW;{ ;T;[o;5
;1[o;,	;!;";&"n;iX;{ ;iX;&"push-margins;@;[ ;>o; ;!;";{ ;i;#[ ;iV;$"1;%[ o;2;3i ;iY;@;4[".prepend-top;T;[o;5
;1[ ;iZ;&"prepend-top;@;[ o;2;3i ;i[;@;4[".append-bottom;T;[o;5
;1[ ;i\;&"append-bottom;@;[ o;;i^;@;i ;[ ;[ ;"Æ/* A container for your columns.
 *
 * #### Note:
 * If you use this mixin without the class and want to support ie6
 * you must set text-align left on your container element in an IE stylesheet. */o;0;1[ ;&"container;ic;@;T;[o;?;3i ;&["
width;@;@;A;o;,	;!;";&"blueprint_container_size;id;{ ;id;[ o;?;3i ;&["margin;@;@;A;o;7;!;";"0 auto;8;B;ie;[ o;5
;1[ ;if;&"clearfix;@;[ o;;ih;@;i ;[ ;[ ;"k/* The last column in a row needs this mixin or it will end up
 * on the next row in some browsers. */o;0;1[ ;&"	last;ij;@;T;[o;?;3i ;&["margin-right;@;@;A;o;7;!;";"0;8;B;ik;[ o;;im;@;i ;[ ;[ ;"9/* Use this mixins to set the width of n columns. */o;0;1[[o;,;!;";&"n;{ 0[o;,;!;";&"	last;@ºo;C	;!;";in;@º;F;&"column;in;@;T;[o;5
;1[o;,	;!;";&"	last;io;{ ;io;&"column-base;@;[ o;5
;1[o;,	;!;";&"n;ip;{ ;ip;&"	span;@;[ o;;ir;@;i ;[ ;[ ;"Â/* Set only the width of an element to align it with the grid.
 * Most of the time you'll want to use `+column` instead.
 *
 * This mixin is especially useful for aligning tables to the grid. */o;0;1[[o;,;!;";&"n;{ 0[o;,;!;";&"override;@Øo;C	;!;";iv;@Ø;F;&"	span;iv;@;T;[o;;o;(;!;";);*;iw;{ ;+o;(;!;";);/;iw;@á;+o;,	;!;";&"blueprint_grid_width;iw;@á;-o;,	;!;";&"n;iw;@á;-o;(;!;";);/;iw;@á;+o;,	;!;";&"blueprint_grid_margin;iw;@á;-o;(;!;";);.;iw;@á;+o;,	;!;";&"n;iw;@á;-o; ;!;";@á;i;#[ ;iw;$"1;%[ ;&"
width;iw;@;[ ;'0o:Sass::Tree::IfNode:@last_elseo;D
;E@ô;0;@;T;[o;?;3i ;&["
width;@;@;A;o;,	;!;";&"
width;i{;{ ;i{;[ ;o;,	;!;";&"override;ix;{ ;@;T;ix:
@else@ô;[o;?;3i ;&["
width;@;@;A;o;(;!;";):concat;iy;{ ;+o;,	;!;";&"
width;iy;@;-o;7
;!;";iy;@;"!important;8;B;iy;[ o;;i};@;i ;[ ;[ ;"/* The basic set of styles needed to make an element
 * behave like a column:
 *
 * * floated to left
 * * gutter margin on the right (unless the last column)
 * * Some IE fixes
 *
 * #### Note:
 * This mixin gets applied automatically when using `+column`
 * so you probably don't need to use it directly unless
 * you need to deviate from the grid or are trying
 * to reduce the amount of generated CSS. */o;0;1[[o;,;!;";&"	last;{ o;C	;!;";i;@;F;&"column-base;i;@;T;[o;5
;1[ ;i;&"float-left;@;[ o;D;Eo;D
;E@;0;@;T;[o;?;3i ;&["margin-right;@;@;A;o;,	;!;";&"blueprint_grid_margin;i;{ ;i;[ ;o;,	;!;";&"	last;i;{ ;@;T;i;F@;[o;5
;1[ ;i;&"	last;@;[ o;2;3i ;i;@;4["* html &;T;[o;?;3i ;&["overflow-x;@;@;A;o;7;!;";"hidden;8;B;i;[ o;;i;@;i ;[ ;[ ;"m/* Mixin to a column to append n empty columns to the right
 * by adding right padding to the column. */o;0;1[[o;,;!;";&"n;{ 0;&"append;i;@;T;[o;?;3i ;&["padding-right;@;@;A;o;(;!;";);/;i;{ ;+o;,	;!;";&"blueprint_grid_outer_width;i;@H;-o;,	;!;";&"n;i;@H;i;[ o;;i;@;i ;[ ;[ ;"k/* Mixin to a column to append n empty columns to the left
 * by adding left padding to the column. */o;0;1[[o;,;!;";&"n;{ 0;&"prepend;i;@;T;[o;?;3i ;&["padding-left;@;@;A;o;(;!;";);/;i;{ ;+o;,	;!;";&"blueprint_grid_outer_width;i;@^;-o;,	;!;";&"n;i;@^;i;[ o;;i;@;i ;[ ;[ ;" /* Adds trailing margin. */o;0;1[[o;,;!;";&"amount;{ o; ;!;";@m;f1.5;#["em;i;$"
1.5em;%[ ;&"append-bottom;i;@;T;[o;?;3i ;&["margin-bottom;@;@;A;o;,	;!;";&"amount;i;{ ;i;[ o;;i;@;i ;[ ;[ ;"/* Adds leading margin. */o;0;1[[o;,;!;";&"amount;{ o; ;!;";@;f1.5;#["em;i;$"
1.5em;%[ ;&"prepend-top;i;@;T;[o;?;3i ;&["margin-top;@;@;A;o;,	;!;";&"amount;i;{ ;i;[ o;;i;@;i ;[ ;[ ;"&/* Base styles that make it possible to pull an element to the left.
 * #### Note:
 * This mixin gets applied automatically when using `+pull`
 * so you probably don't need to use it directly unless
 * you need to deviate from the grid or are trying
 * to reduce the amount of generated CSS. */o;0;1[ ;&"pull-base;i¥;@;T;[o;5
;1[ ;i¦;&"float-left;@;[ o;?;3i ;&["position;@;@;A;o;7;!;";"relative;8;B;i§;[ o;;i©;@;i ;[ ;[ ;"/* The amount of pulling for element to the left.
 * #### Note:
 * This mixin gets applied automatically when using `+pull`
 * so you probably don't need to use it directly unless
 * you need to deviate from the grid or are trying
 * to reduce the amount of generated CSS. */o;0;1[[o;,;!;";&"n;{ 0[o;,;!;";&"	last;@±o;C	;!;";i¯;@±;F;&"pull-margins;i¯;@;T;[o;D;Eo;D
;E@¹;0;@;T;[o;?;3i ;&["margin-left;@;@;A;o;(;!;";);/;i³;{ ;+o:!Sass::Script::UnaryOperation
;!;";i³;);.;@¿:@operando;,	;!;";&"blueprint_grid_outer_width;i³;@¿;-o;,	;!;";&"n;i³;@¿;i³;[ ;o;,	;!;";&"	last;i°;{ ;@;T;i°;F@¹;[o;?;3i ;&["margin-left;@;@;A;o;(;!;";);*;i±;{ ;+o;(;!;";);/;i±;@Î;+o;H
;!;";i±;);.;@Î;Io;,	;!;";&"blueprint_grid_outer_width;i±;@Î;-o;,	;!;";&"n;i±;@Î;-o;,	;!;";&"blueprint_grid_margin;i±;@Î;i±;[ o;;iµ;@;i ;[ ;[ ;"/* Moves a column `n` columns to the left.
 *
 * This mixin can also be used to change the display order of columns.
 *
 * If pulling past the last (visually) element in a row,
 * pass `true` as the second argument so the calculations can adjust
 * accordingly. */o;;i½;@;i ;[ ;[ ;"/* For example:
 *
 * HTML:
 * <pre class="source-code html">
 * <div id="one">One</div>
 * <div id="two">Two</div>
 * </pre>
 * Sass:
 * <pre class="source-code sass">
 * #one
 *   +column(18, true)
 *   +prepend(6)
 * #two
 *   +column(6)
 *   +pull(18, true)
 * </pre> */o;0;1[[o;,;!;";&"n;{ 0[o;,;!;";&"	last;@åo;C	;!;";iÍ;@å;F;&"	pull;iÍ;@;T;[o;5
;1[ ;iÎ;&"pull-base;@;[ o;5
;1[o;,	;!;";&"n;iÏ;{ o;,	;!;";&"	last;iÏ;@ô;iÏ;&"pull-margins;@;[ o;0;1[ ;&"push-base;iÑ;@;T;[o;5
;1[ ;iÒ;&"float-right;@;[ o;?;3i ;&["position;@;@;A;o;7;!;";"relative;8;B;iÓ;[ o;0;1[[o;,;!;";&"n;{ 0;&"push-margins;iÕ;@;T;[o;?;3i ;&["margin;@;@;A;o;(;!;";);G;iÖ;{ ;+o;(;!;";);G;iÖ;@;+o;(;!;";);G;iÖ;@;+o; ;!;";@;i ;#[ ;iÖ;$"0;%[ ;-o;(;!;";);/;iÖ;@;+o;H
;!;";iÖ;);.;@;Io;,	;!;";&"blueprint_grid_outer_width;iÖ;@;-o;,	;!;";&"n;iÖ;@;-o; ;!;";@;f1.5;#["em;iÖ;$"
1.5em;%[ ;-o;(;!;";);/;iÖ;@;+o;,	;!;";&"blueprint_grid_outer_width;iÖ;@;-o;,	;!;";&"n;iÖ;@;iÖ;[ o;;iØ;@;i ;[ ;[ ;">/* mixin to a column to push it n columns to the right */o;0;1[[o;,;!;";&"n;{ 0;&"	push;iÙ;@;T;[o;5
;1[ ;iÚ;&"push-base;@;[ o;5
;1[o;,	;!;";&"n;iÛ;{ ;iÛ;&"push-margins;@;[ o;;iÝ;@;i ;[ ;[ ;"1/* Border on right hand side of a column. */o;0;1[[o;,;!;";&"border_color;{ o:Sass::Script::Color
;!;";iÞ;@L;0:@attrs{	:rediî:
greeniî:	blueiî:
alphai[o;,;!;";&"border_width;@Lo; ;!;";@L;i;#["px;iÞ;$"1px;%[ ;&"border;iÞ;@;T;[o;?;3i ;&["padding-right;@;@;A;o;(;!;";);.;iß;{ ;+o;(;!;";):div;iß;@];+o;,	;!;";&"blueprint_grid_margin;iß;@];-o; ;!;";@];i;#[ ;iß;$"2;%[ ;-o;,	;!;";&"border_width;iß;@];iß;[ o;?;3i ;&["margin-right;@;@;A;o;(;!;";);P;ià;{ ;+o;,	;!;";&"blueprint_grid_margin;ià;@l;-o; ;!;";@l;i;#[ ;ià;$"2;%[ ;ià;[ o;?;3i ;&["border-right;@;@;A;o: Sass::Script::Interpolation:@beforeo;Q;R0:@aftero;7
;!;";iá;{ ;"
solid;8;B;@z:	@mido;,	;!;";&"border_width;iá;@z:@originally_textF:@whitespace_afteri ;iá:@whitespace_beforei´;S0;@z;To;,	;!;";&"border_color;iá;@z;UF;V0;iá;WiË;iá;[ o;;iã;@;i ;[ ;[ ;"9/* Border with more whitespace, spans one column. */o;0;1[[o;,;!;";&"border_color;{ o;J
;!;";iä;@;0;K{	;Liî;Miî;Niî;Oi[o;,;!;";&"border_width;@o; ;!;";@;i;#["px;iä;$"1px;%[ ;&"colborder;iä;@;T;[o;?;3i ;&["padding-right;@;@;A;o;6
;1[o;(;!;";);P;iå;{ ;+o;(;!;";);.;iå;@;+o;(;!;";);*;iå;@;+o;,	;!;";&"blueprint_grid_width;iå;@;-o;(;!;";);/;iå;@;+o; ;!;";@;i;#[ ;iå;$"2;%[ ;-o;,	;!;";&"blueprint_grid_margin;iå;@;-o;,	;!;";&"border_width;iå;@;-o; ;!;";@;i;#[ ;iå;$"2;%[ ;!;";iå;&"
floor;@;iå;[ o;?;3i ;&["margin-right;@;@;A;o;6
;1[o;(;!;";);P;iæ;{ ;+o;(;!;";);.;iæ;@·;+o;(;!;";);*;iæ;@·;+o;,	;!;";&"blueprint_grid_width;iæ;@·;-o;(;!;";);/;iæ;@·;+o; ;!;";@·;i;#[ ;iæ;$"2;%[ ;-o;,	;!;";&"blueprint_grid_margin;iæ;@·;-o;,	;!;";&"border_width;iæ;@·;-o; ;!;";@·;i;#[ ;iæ;$"2;%[ ;!;";iæ;&"	ceil;@·;iæ;[ o;?;3i ;&["border-right;@;@;A;o;Q;Ro;Q;R0;So;7
;!;";iç;{ ;"
solid;8;B;@Ñ;To;,	;!;";&"border_width;iç;@Ñ;UF;Vi ;iç;Wi#;S0;@Ñ;To;,	;!;";&"border_color;iç;@Ñ;UF;V0;iç;Wi:;iç;[ o;;ié;@;i ;[ ;[ ;"J/* Mixin this to an hr to make a horizontal ruler across a column. */o;0;1[[o;,;!;";&"border_color;{ o;J
;!;";iê;@á;0;K{	;LiÝ;MiÝ;NiÝ;Oi;&"colruler;iê;@;T;[o;?;3i ;&["background;@;@;A;o;,	;!;";&"border_color;ië;{ ;ië;[ o;?;3i ;&["
color;@;@;A;o;,	;!;";&"border_color;iì;{ ;iì;[ o;?;3i ;&["
clear;@;@;A;o;7;!;";"	both;8;B;ií;[ o;?;3i ;&["
float;@;@;A;o;7;!;";"	none;8;B;iî;[ o;?;3i ;&["
width;@;@;A;o;7;!;";"	100%;8;B;iï;[ o;?;3i ;&["height;@;@;A;o;7;!;";"
0.1em;8;B;ið;[ o;?;3i ;&["margin;@;@;A;o;7;!;";"0 0 1.45em;8;B;iñ;[ o;?;3i ;&["border;@;@;A;o;7;!;";"	none;8;B;iò;[ o;;iô;@;i ;[ ;[ ;"K/* Mixin this to an hr to make a horizontal spacer across a column. */o;0;1[ ;&"colspacer;iõ;@;T;[	o;5
;1[ ;iö;&"colruler;@;[ o;?;3i ;&["background;@;@;A;o;7;!;";"
white;8;B;i÷;[ o;?;3i ;&["
color;@;@;A;o;7;!;";"
white;8;B;iø;[ o;?;3i ;&["visibility;@;@;A;o;7;!;";"hidden;8;B;iù;[ 